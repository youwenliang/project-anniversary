{"ast":null,"code":"/*! npm.im/image-promise 5.0.1 */\n'use strict';\n\nfunction load(image) {\n  if (!image) {\n    return Promise.reject();\n  } else if (typeof image === 'string') {\n    /* Create a <img> from a string */\n    var src = image;\n    image = new Image();\n    image.src = src;\n  } else if (image.length !== undefined) {\n    /* Treat as multiple images */\n    // Momentarily ignore errors\n    var reflected = [].map.call(image, function (img) {\n      return load(img).catch(function (err) {\n        return err;\n      });\n    });\n    return Promise.all(reflected).then(function (results) {\n      var loaded = results.filter(function (x) {\n        return x.naturalWidth;\n      });\n\n      if (loaded.length === results.length) {\n        return loaded;\n      }\n\n      return Promise.reject({\n        loaded: loaded,\n        errored: results.filter(function (x) {\n          return !x.naturalWidth;\n        })\n      });\n    });\n  } else if (image.tagName !== 'IMG') {\n    return Promise.reject();\n  }\n\n  var promise = new Promise(function (resolve, reject) {\n    if (image.naturalWidth) {\n      // If the browser can determine the naturalWidth the\n      // image is already loaded successfully\n      resolve(image);\n    } else if (image.complete) {\n      // If the image is complete but the naturalWidth is 0px\n      // it is probably broken\n      reject(image);\n    } else {\n      image.addEventListener('load', fullfill);\n      image.addEventListener('error', fullfill);\n    }\n\n    function fullfill() {\n      if (image.naturalWidth) {\n        resolve(image);\n      } else {\n        reject(image);\n      }\n\n      image.removeEventListener('load', fullfill);\n      image.removeEventListener('error', fullfill);\n    }\n  });\n  promise.image = image;\n  return promise;\n}\n\nmodule.exports = load;","map":null,"metadata":{},"sourceType":"script"}